-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Denbergvanthijs/aHaskellPriori#readme</a>
@package aHaskellPriori
@version 2019.11.10.2


-- | Module Datatypes bevat de nieuwe versie van alle data om mee te testen
--   en debuggen. Deze waardes vervangen in het verloop van het project de
--   data in <tt>DatatypesOld</tt>. Op dit moment werkt deze data helaas
--   nog niet met de functies uit <tt>Lib</tt>.
module Datatypes

-- | Het Product-datatype. Deze is opgebouwd uit één enkele string.
newtype Product
Product :: String -> Product

-- | Het Transactie-datatype. Deze is opgebouwd uit een set van producten.
newtype Transactie
Transactie :: Set Product -> Transactie

-- | Het Transacties-datatype. Deze is opgebouwd uit een lijst van één of
--   meer Transactie.
newtype Transacties
Transacties :: [Transactie] -> Transacties

-- | Het KeuzeOutput-datatype. Dit datatype wordt gebruikt om het resultaat
--   van de gebruiker in <a>hs</a> goed te tonen.
data KeuzeOutput
Support :: Double -> KeuzeOutput
Confidence :: Double -> KeuzeOutput
Lift :: Double -> KeuzeOutput
Combi :: (Double, Product) -> KeuzeOutput
Foutief :: String -> KeuzeOutput

-- | Product om mee te debuggen
prodA :: Product

-- | Product om mee te debuggen
prodB :: Product

-- | Product om mee te debuggen
prodC :: Product

-- | Product om mee te debuggen
prodD :: Product

-- | Product om mee te debuggen
prodE :: Product

-- | Product dat niet voorkomt in de transacties om mee te debuggen
prodF :: Product

-- | Subset van een transactie om mee te debuggen
transAB :: Transactie

-- | Subset van een transactie om mee te debuggen
transDB :: Transactie

-- | Transactie om mee te debuggen
transT1 :: Transactie

-- | Transactie om mee te debuggen
transT2 :: Transactie

-- | Transactie om mee te debuggen
transT3 :: Transactie

-- | Lijst van Transactie om mee te debuggen
--   
--   Deze variabele moet een dataset simuleren.
alleTrans :: Transacties
instance GHC.Show.Show Datatypes.KeuzeOutput
instance GHC.Classes.Ord Datatypes.Transacties
instance GHC.Classes.Eq Datatypes.Transacties
instance GHC.Show.Show Datatypes.Transacties
instance GHC.Classes.Ord Datatypes.Transactie
instance GHC.Classes.Eq Datatypes.Transactie
instance GHC.Show.Show Datatypes.Transactie
instance GHC.Classes.Ord Datatypes.Product
instance GHC.Classes.Eq Datatypes.Product
instance GHC.Show.Show Datatypes.Product


-- | Module Tools bevat alle hulpmiddelen om de hoofdfuncties in
--   <tt>Lib</tt> te laten werken.
module Tools

-- | Fold Transacties naar Transactie zodat alle unieke producten
--   overblijven
--   
--   Fold was eerst zelf uitgeschreven: <tt> recursiveUnion (x:xs) = x
--   `union` recursiveUnion xs </tt>
recursiveUnion :: Transacties -> Transactie

-- | Veranderd Transactie naar een gesoorteerde lijst van Producten
setToListOfSets :: Transactie -> [Product]

-- | Deelt twee integers en geeft een float terug
--   
--   Credits:
--   <a>stackoverflow.com/questions/3275193/whats-the-right-way-to-divide-two-int-values-to-obtain-a-float</a>
floatDiv :: Int -> Int -> Double

-- | Returned een tuple met de maximale first uit een lijst met tuples
--   
--   Credits:
--   <a>stackoverflow.com/questions/52910840/haskell-finding-maximum-value-in-a-list-of-tuples</a>
listOfTuplesMax :: Ord a => [(a, b)] -> (a, b)

-- | Returned de vereniging van twee Transactie
vereniging :: Transactie -> Transactie -> Transactie

-- | Returned de intersectie van twee Transactie
intersectie :: Transactie -> Transactie -> Transactie

-- | Zet een csv-bestand om naar een bestand met lijsten van Strings. Naast
--   een bestand wordt er gevraagd naar een separator. Dit maakt de functie
--   inzetbaar voor verschillende bestanden.
bestandSplit :: String -> String -> [[String]]

-- | Zet een bestand met lijsten van Strings om naar het
--   Transacties-datatype. Iedere lijst van Strings wordt eerst een
--   Transactie met Producten.
bestandTrans :: [[String]] -> Transacties


-- | Module Lib bevat de belangrijkste functies van aHaskellPriori.
module Lib

-- | Leest een bestand in en print iedere regel Deze functie is een oude
--   versie en wordt niet meer gebruikt
--   
--   Credits:
--   <a>https://stackoverflow.com/questions/24234517/understanding-withfile-with-example</a>
bestandLezen :: FilePath -> IO ()

-- | Berekend de support van één Transactie: Support(X)
--   
--   De Transactie X moet één of meerdere Product bevatten. Mocht
--   Transactie X leeg zijn, dan is de support gelijk aan 0.0
support :: Transactie -> Transacties -> Double

-- | Berekend de confidence van een Product ten opzichte van een ander
--   Product: Confidence(X -&gt; Y)
--   
--   Mocht een van de Producten leeg zijn, dan is de confidence 0.0. Mocht
--   de support van Product X 0.0 zijn, dan is de confidence tevens 0.0. Op
--   deze manier worden zero division errors en NaN-waardes volkomen.
confidence :: Product -> Product -> Transacties -> Double

-- | Berekend de lift van een Product ten opzichte van een ander Product:
--   Lift(X -&gt; Y)
--   
--   Mocht de support van Product Y 0.0 zijn, dan is de confidence tevens
--   0.0. Op deze manier worden zero division errors en NaN-waardes
--   volkomen.
lift :: Product -> Product -> Transacties -> Double

-- | Berekend het beste Product Y voor de formule: Lift(X -&gt; Y)
--   
--   Ondanks dat meerdere producten een even hoge lift kunnen hebben met
--   setX zal alleen de laatste (alfabetisch gesoorteerde) waarde worden
--   weergegeven.
bestLift :: Product -> Transacties -> (Double, Product)

-- | Berekend het hoogste Product X voor de formule: Support(X)
--   
--   Ondanks dat meerdere producten een even hoge support kunnen hebben zal
--   alleen de laatste (alfabetisch gesoorteerde) waarde worden
--   weergegeven.
bestSupport :: Transacties -> (Double, Product)


-- | Module Matrix bevat alle code van de oude opzet voor het Apriori
--   algoritme. Na verloop van tijd bleek het per keer berekenen van de
--   support, confidence en lift snel genoeg. Het van te voren berekenen
--   van de waardes in de verschillende matrixen blijkt dus niet nodig.
module Matrix

-- | Returned de lengte van een set
setLen :: Set a -> Int

-- | Genereerd een leeg matrix met de lengtes van het aantal unieke
--   producten in een dataset
emptySupportMatrix :: Num b => Set a -> Matrix b
