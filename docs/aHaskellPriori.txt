-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Denbergvanthijs/aHaskellPriori#readme</a>
@package aHaskellPriori
@version 2019.10.26.1

module Datatypes
data Product
Product :: Set [Char] -> Product
data Transactie
Transactie :: Set Product -> Transactie
data Transacties
Transacties :: [Transactie] -> Transacties

-- | Variabelen om mee te debuggen
prodA :: Product
prodB :: Product
prodC :: Product
prodD :: Product
prodE :: Product
transAB :: Transactie
transDB :: Transactie
transT1 :: Transactie
transT2 :: Transactie
transT3 :: Transactie
alleTrans :: Transacties
instance GHC.Classes.Ord Datatypes.Transacties
instance GHC.Classes.Eq Datatypes.Transacties
instance GHC.Show.Show Datatypes.Transacties
instance GHC.Classes.Ord Datatypes.Transactie
instance GHC.Classes.Eq Datatypes.Transactie
instance GHC.Show.Show Datatypes.Transactie
instance GHC.Classes.Ord Datatypes.Product
instance GHC.Classes.Eq Datatypes.Product
instance GHC.Show.Show Datatypes.Product

module DatatypesOld
setA :: Set [Char]
setB :: Set [Char]
setC :: Set [Char]
setD :: Set [Char]
setE :: Set [Char]
setAB :: Set [Char]
setDB :: Set [Char]
setT1 :: Set [Char]
setT2 :: Set [Char]
setT3 :: Set [Char]
listTrans :: [Set [Char]]

module Tools
recursiveUnion :: Ord a => [Set a] -> Set a
setToAscList :: Ord a => Set a -> [a]
setToListOfSets :: Ord a => Set a -> [Set a]
floatDiv :: Int -> Int -> Double
listOfTuplesMax :: Ord a => [(a, b)] -> (a, b)

module Lib

-- | Leest een bestand met transacties in en print iedere transactie
--   credits:
--   <a>https://stackoverflow.com/questions/24234517/understanding-withfile-with-example</a>
bestandLezen :: FilePath -> IO ()

-- | Berekend de support van een set: Support(X). De set X kan uit één of
--   meerdere producten bestaan.
calcSupport :: Ord a => Set a -> [Set a] -> Double

-- | Berekend de confidence van een set: Confidence(X -&gt; Y) De sets X en
--   Y kunnen uit één of meerdere producten bestaan
calcConf :: Ord a => Set a -> Set a -> [Set a] -> Double

-- | Berekend de lift van een set: Lift(X-&gt;Y) De sets X en Y kunnen uit
--   één of meerdere producten bestaan
calcLift :: Ord a => Set a -> Set a -> [Set a] -> Double

-- | Berekend de beste Y voor de formule: Lift(X-&gt;Y)
calcBestLift :: Ord a => Set a -> [Set a] -> (Double, Set a)

module Matrix
setLen :: Set a -> Int
emptySupportMatrix :: Num b => Set a -> Matrix b
zipSupport :: Ord a1 => a2 -> [Set a1] -> [(a2, Set a1)]
unionZip :: Ord a => Set a -> [Set a] -> [Set a]
